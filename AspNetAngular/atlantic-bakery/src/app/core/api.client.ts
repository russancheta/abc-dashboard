/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllUsers(): Observable<Account[]> {
        let url_ = this.baseUrl + "/api/Account/getAllUsers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUsers(<any>response_);
                } catch (e) {
                    return <Observable<Account[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Account[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllUsers(response: HttpResponseBase): Observable<Account[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Account.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Account[]>(<any>null);
    }

    /**
     * @return Success
     */
    accountAll(email: string): Observable<Account[]> {
        let url_ = this.baseUrl + "/api/Account/searchUser{email}";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined.");
        url_ = url_.replace("{email}", encodeURIComponent("" + email)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccountAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccountAll(<any>response_);
                } catch (e) {
                    return <Observable<Account[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Account[]>><any>_observableThrow(response_);
        }));
    }

    protected processAccountAll(response: HttpResponseBase): Observable<Account[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Account.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Account[]>(<any>null);
    }

    /**
     * @return Success
     */
    viewUser(user_id: string): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/Account/viewUser/{user_id}";
        if (user_id === undefined || user_id === null)
            throw new Error("The parameter 'user_id' must be defined.");
        url_ = url_.replace("{user_id}", encodeURIComponent("" + user_id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processViewUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processViewUser(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processViewUser(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    account(body: RegistrationViewModel | undefined): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/Account";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccount(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processAccount(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: string): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/Account/delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(user_id: string, body: AccountViewModel | undefined): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/Account/update/{user_id}";
        if (user_id === undefined || user_id === null)
            throw new Error("The parameter 'user_id' must be defined.");
        url_ = url_.replace("{user_id}", encodeURIComponent("" + user_id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changepassword(body: ChangePassViewModel | undefined): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/Account/changepassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangepassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangepassword(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processChangepassword(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    resetPassword(body: ResetPasswordViewModel | undefined): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/Account/resetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetPassword(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processResetPassword(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @param branch (optional) 
     * @return Success
     */
    getARIP(branch: string | undefined): Observable<ARIPMonitoring[]> {
        let url_ = this.baseUrl + "/api/controll/getARIP?";
        if (branch === null)
            throw new Error("The parameter 'branch' cannot be null.");
        else if (branch !== undefined)
            url_ += "branch=" + encodeURIComponent("" + branch) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetARIP(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetARIP(<any>response_);
                } catch (e) {
                    return <Observable<ARIPMonitoring[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ARIPMonitoring[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetARIP(response: HttpResponseBase): Observable<ARIPMonitoring[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ARIPMonitoring.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ARIPMonitoring[]>(<any>null);
    }

    /**
     * @param docNum (optional) 
     * @return Success
     */
    getARIPDetails(docNum: number | undefined): Observable<ARIPDetails[]> {
        let url_ = this.baseUrl + "/api/controll/getARIPDetails?";
        if (docNum === null)
            throw new Error("The parameter 'docNum' cannot be null.");
        else if (docNum !== undefined)
            url_ += "docNum=" + encodeURIComponent("" + docNum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetARIPDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetARIPDetails(<any>response_);
                } catch (e) {
                    return <Observable<ARIPDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ARIPDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetARIPDetails(response: HttpResponseBase): Observable<ARIPDetails[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ARIPDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ARIPDetails[]>(<any>null);
    }

    /**
     * @param docNum (optional) 
     * @return Success
     */
    getIPDetails(docNum: number | undefined): Observable<IPDetails[]> {
        let url_ = this.baseUrl + "/api/controll/getIPDetails?";
        if (docNum === null)
            throw new Error("The parameter 'docNum' cannot be null.");
        else if (docNum !== undefined)
            url_ += "docNum=" + encodeURIComponent("" + docNum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIPDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIPDetails(<any>response_);
                } catch (e) {
                    return <Observable<IPDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<IPDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetIPDetails(response: HttpResponseBase): Observable<IPDetails[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(IPDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IPDetails[]>(<any>null);
    }

    /**
     * @param docNum (optional) 
     * @return Success
     */
    getDepositDetails(docNum: number | undefined): Observable<DepositDetails[]> {
        let url_ = this.baseUrl + "/api/controll/getDepositDetails?";
        if (docNum === null)
            throw new Error("The parameter 'docNum' cannot be null.");
        else if (docNum !== undefined)
            url_ += "docNum=" + encodeURIComponent("" + docNum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDepositDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDepositDetails(<any>response_);
                } catch (e) {
                    return <Observable<DepositDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<DepositDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetDepositDetails(response: HttpResponseBase): Observable<DepositDetails[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(DepositDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DepositDetails[]>(<any>null);
    }

    /**
     * @param docEntry (optional) 
     * @return Success
     */
    getARIPDepDifference(docEntry: number | undefined): Observable<ARIPDepDifference[]> {
        let url_ = this.baseUrl + "/api/controll/getARIPDepDifference?";
        if (docEntry === null)
            throw new Error("The parameter 'docEntry' cannot be null.");
        else if (docEntry !== undefined)
            url_ += "docEntry=" + encodeURIComponent("" + docEntry) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetARIPDepDifference(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetARIPDepDifference(<any>response_);
                } catch (e) {
                    return <Observable<ARIPDepDifference[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ARIPDepDifference[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetARIPDepDifference(response: HttpResponseBase): Observable<ARIPDepDifference[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ARIPDepDifference.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ARIPDepDifference[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    insertARMRemarks(body: ARMRemarks | undefined): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/controll/insertARMRemarks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertARMRemarks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertARMRemarks(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processInsertARMRemarks(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @param arNo (optional) 
     * @return Success
     */
    getARMRemarks(arNo: number | undefined): Observable<ARMRemarks[]> {
        let url_ = this.baseUrl + "/api/controll/getARMRemarks?";
        if (arNo === null)
            throw new Error("The parameter 'arNo' cannot be null.");
        else if (arNo !== undefined)
            url_ += "arNo=" + encodeURIComponent("" + arNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetARMRemarks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetARMRemarks(<any>response_);
                } catch (e) {
                    return <Observable<ARMRemarks[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ARMRemarks[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetARMRemarks(response: HttpResponseBase): Observable<ARMRemarks[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ARMRemarks.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ARMRemarks[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: CredentialsViewModel | undefined): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @return Success
     */
    getBranchList(): Observable<Branches[]> {
        let url_ = this.baseUrl + "/api/controllers/getBranchList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBranchList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBranchList(<any>response_);
                } catch (e) {
                    return <Observable<Branches[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Branches[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetBranchList(response: HttpResponseBase): Observable<Branches[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Branches.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Branches[]>(<any>null);
    }

    /**
     * @return Success
     */
    getLocationList(): Observable<Locations[]> {
        let url_ = this.baseUrl + "/api/controllers/getLocationList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLocationList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLocationList(<any>response_);
                } catch (e) {
                    return <Observable<Locations[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Locations[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetLocationList(response: HttpResponseBase): Observable<Locations[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Locations.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Locations[]>(<any>null);
    }

    /**
     * @return Success
     */
    getCustomerGroup(): Observable<CustomerGroup[]> {
        let url_ = this.baseUrl + "/api/controllers/getCustomerGroup";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCustomerGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCustomerGroup(<any>response_);
                } catch (e) {
                    return <Observable<CustomerGroup[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CustomerGroup[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCustomerGroup(response: HttpResponseBase): Observable<CustomerGroup[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CustomerGroup.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CustomerGroup[]>(<any>null);
    }

    /**
     * @param branch (optional) 
     * @return Success
     */
    getIssueForProd(branch: string | undefined): Observable<IssueForProduction[]> {
        let url_ = this.baseUrl + "/api/controllers/getIssueForProd?";
        if (branch === null)
            throw new Error("The parameter 'branch' cannot be null.");
        else if (branch !== undefined)
            url_ += "branch=" + encodeURIComponent("" + branch) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIssueForProd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIssueForProd(<any>response_);
                } catch (e) {
                    return <Observable<IssueForProduction[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<IssueForProduction[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetIssueForProd(response: HttpResponseBase): Observable<IssueForProduction[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(IssueForProduction.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IssueForProduction[]>(<any>null);
    }

    /**
     * @param docnum (optional) 
     * @return Success
     */
    getIssueProdDetails(docnum: number | undefined): Observable<IssueForProdDetails[]> {
        let url_ = this.baseUrl + "/api/controllers/getIssueProdDetails?";
        if (docnum === null)
            throw new Error("The parameter 'docnum' cannot be null.");
        else if (docnum !== undefined)
            url_ += "docnum=" + encodeURIComponent("" + docnum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIssueProdDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIssueProdDetails(<any>response_);
                } catch (e) {
                    return <Observable<IssueForProdDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<IssueForProdDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetIssueProdDetails(response: HttpResponseBase): Observable<IssueForProdDetails[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(IssueForProdDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IssueForProdDetails[]>(<any>null);
    }

    /**
     * @param cardName (optional) 
     * @return Success
     */
    getJobOrder(cardName: string | undefined): Observable<JobOrder[]> {
        let url_ = this.baseUrl + "/api/controllers/getJobOrder?";
        if (cardName === null)
            throw new Error("The parameter 'cardName' cannot be null.");
        else if (cardName !== undefined)
            url_ += "cardName=" + encodeURIComponent("" + cardName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJobOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJobOrder(<any>response_);
                } catch (e) {
                    return <Observable<JobOrder[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<JobOrder[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetJobOrder(response: HttpResponseBase): Observable<JobOrder[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(JobOrder.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<JobOrder[]>(<any>null);
    }

    /**
     * @param docnum (optional) 
     * @return Success
     */
    getJobOrderDetails(docnum: number | undefined): Observable<JobOrderDetails[]> {
        let url_ = this.baseUrl + "/api/controllers/getJobOrderDetails?";
        if (docnum === null)
            throw new Error("The parameter 'docnum' cannot be null.");
        else if (docnum !== undefined)
            url_ += "docnum=" + encodeURIComponent("" + docnum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJobOrderDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJobOrderDetails(<any>response_);
                } catch (e) {
                    return <Observable<JobOrderDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<JobOrderDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetJobOrderDetails(response: HttpResponseBase): Observable<JobOrderDetails[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(JobOrderDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<JobOrderDetails[]>(<any>null);
    }

    /**
     * @param branch (optional) 
     * @return Success
     */
    getProductionForecast(branch: string | undefined): Observable<ProductionForecast[]> {
        let url_ = this.baseUrl + "/api/controllers/getProductionForecast?";
        if (branch === null)
            throw new Error("The parameter 'branch' cannot be null.");
        else if (branch !== undefined)
            url_ += "branch=" + encodeURIComponent("" + branch) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProductionForecast(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductionForecast(<any>response_);
                } catch (e) {
                    return <Observable<ProductionForecast[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductionForecast[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetProductionForecast(response: HttpResponseBase): Observable<ProductionForecast[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ProductionForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductionForecast[]>(<any>null);
    }

    /**
     * @param docnum (optional) 
     * @return Success
     */
    getProductionForecastDetails(docnum: number | undefined): Observable<ProductionForecastDetails[]> {
        let url_ = this.baseUrl + "/api/controllers/getProductionForecastDetails?";
        if (docnum === null)
            throw new Error("The parameter 'docnum' cannot be null.");
        else if (docnum !== undefined)
            url_ += "docnum=" + encodeURIComponent("" + docnum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProductionForecastDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductionForecastDetails(<any>response_);
                } catch (e) {
                    return <Observable<ProductionForecastDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductionForecastDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetProductionForecastDetails(response: HttpResponseBase): Observable<ProductionForecastDetails[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ProductionForecastDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductionForecastDetails[]>(<any>null);
    }

    /**
     * @param itrNo (optional) 
     * @return Success
     */
    getITCompareSQ(itrNo: string | undefined): Observable<ProductionForecastDetails[]> {
        let url_ = this.baseUrl + "/api/controllers/getITCompareSQ?";
        if (itrNo === null)
            throw new Error("The parameter 'itrNo' cannot be null.");
        else if (itrNo !== undefined)
            url_ += "itrNo=" + encodeURIComponent("" + itrNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetITCompareSQ(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetITCompareSQ(<any>response_);
                } catch (e) {
                    return <Observable<ProductionForecastDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductionForecastDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetITCompareSQ(response: HttpResponseBase): Observable<ProductionForecastDetails[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ProductionForecastDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductionForecastDetails[]>(<any>null);
    }

    /**
     * @param docentry (optional) 
     * @return Success
     */
    sqgrDifference(docentry: number | undefined): Observable<SQGRDifference[]> {
        let url_ = this.baseUrl + "/api/controllers/sqgrDifference?";
        if (docentry === null)
            throw new Error("The parameter 'docentry' cannot be null.");
        else if (docentry !== undefined)
            url_ += "docentry=" + encodeURIComponent("" + docentry) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSqgrDifference(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSqgrDifference(<any>response_);
                } catch (e) {
                    return <Observable<SQGRDifference[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SQGRDifference[]>><any>_observableThrow(response_);
        }));
    }

    protected processSqgrDifference(response: HttpResponseBase): Observable<SQGRDifference[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SQGRDifference.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SQGRDifference[]>(<any>null);
    }

    /**
     * @param docnum (optional) 
     * @return Success
     */
    getITRNos(docnum: number | undefined): Observable<ITRNos[]> {
        let url_ = this.baseUrl + "/api/controllers/getITRNos?";
        if (docnum === null)
            throw new Error("The parameter 'docnum' cannot be null.");
        else if (docnum !== undefined)
            url_ += "docnum=" + encodeURIComponent("" + docnum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetITRNos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetITRNos(<any>response_);
                } catch (e) {
                    return <Observable<ITRNos[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ITRNos[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetITRNos(response: HttpResponseBase): Observable<ITRNos[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ITRNos.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ITRNos[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    insertPMRemarks(body: PMRemarks | undefined): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/controllers/insertPMRemarks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertPMRemarks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertPMRemarks(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processInsertPMRemarks(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @param remarks (optional) 
     * @param sqNo (optional) 
     * @return Success
     */
    updateSQRemarks(remarks: string | undefined, sqNo: number | undefined): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/controllers/updateSQRemarks?";
        if (remarks === null)
            throw new Error("The parameter 'remarks' cannot be null.");
        else if (remarks !== undefined)
            url_ += "remarks=" + encodeURIComponent("" + remarks) + "&"; 
        if (sqNo === null)
            throw new Error("The parameter 'sqNo' cannot be null.");
        else if (sqNo !== undefined)
            url_ += "sqNo=" + encodeURIComponent("" + sqNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateSQRemarks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSQRemarks(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateSQRemarks(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @param sqNo (optional) 
     * @return Success
     */
    getPMRemarks(sqNo: number | undefined): Observable<PMRemarks[]> {
        let url_ = this.baseUrl + "/api/controllers/getPMRemarks?";
        if (sqNo === null)
            throw new Error("The parameter 'sqNo' cannot be null.");
        else if (sqNo !== undefined)
            url_ += "sqNo=" + encodeURIComponent("" + sqNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPMRemarks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPMRemarks(<any>response_);
                } catch (e) {
                    return <Observable<PMRemarks[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PMRemarks[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPMRemarks(response: HttpResponseBase): Observable<PMRemarks[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(PMRemarks.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PMRemarks[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateSQ(body: number[] | undefined): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/controllers/updateSQ";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateSQ(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSQ(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateSQ(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @param branch (optional) 
     * @param group (optional) 
     * @return Success
     */
    getProductionOrder(branch: string | undefined, group: string | undefined): Observable<ProductionOrder[]> {
        let url_ = this.baseUrl + "/api/controllers/getProductionOrder?";
        if (branch === null)
            throw new Error("The parameter 'branch' cannot be null.");
        else if (branch !== undefined)
            url_ += "branch=" + encodeURIComponent("" + branch) + "&"; 
        if (group === null)
            throw new Error("The parameter 'group' cannot be null.");
        else if (group !== undefined)
            url_ += "group=" + encodeURIComponent("" + group) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProductionOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductionOrder(<any>response_);
                } catch (e) {
                    return <Observable<ProductionOrder[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductionOrder[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetProductionOrder(response: HttpResponseBase): Observable<ProductionOrder[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ProductionOrder.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductionOrder[]>(<any>null);
    }

    /**
     * @param branch (optional) 
     * @return Success
     */
    filterITR(branch: string | undefined): Observable<FilterITR[]> {
        let url_ = this.baseUrl + "/api/controllers/filterITR?";
        if (branch === null)
            throw new Error("The parameter 'branch' cannot be null.");
        else if (branch !== undefined)
            url_ += "branch=" + encodeURIComponent("" + branch) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFilterITR(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFilterITR(<any>response_);
                } catch (e) {
                    return <Observable<FilterITR[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<FilterITR[]>><any>_observableThrow(response_);
        }));
    }

    protected processFilterITR(response: HttpResponseBase): Observable<FilterITR[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(FilterITR.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FilterITR[]>(<any>null);
    }

    /**
     * @param docnum (optional) 
     * @return Success
     */
    getProdDetails(docnum: number | undefined): Observable<ProdOrderDetails[]> {
        let url_ = this.baseUrl + "/api/controllers/getProdDetails?";
        if (docnum === null)
            throw new Error("The parameter 'docnum' cannot be null.");
        else if (docnum !== undefined)
            url_ += "docnum=" + encodeURIComponent("" + docnum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProdDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProdDetails(<any>response_);
                } catch (e) {
                    return <Observable<ProdOrderDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProdOrderDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetProdDetails(response: HttpResponseBase): Observable<ProdOrderDetails[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ProdOrderDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProdOrderDetails[]>(<any>null);
    }

    /**
     * @param docnum (optional) 
     * @return Success
     */
    getITDetails(docnum: number | undefined): Observable<InvTransferDetails[]> {
        let url_ = this.baseUrl + "/api/controllers/getITDetails?";
        if (docnum === null)
            throw new Error("The parameter 'docnum' cannot be null.");
        else if (docnum !== undefined)
            url_ += "docnum=" + encodeURIComponent("" + docnum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetITDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetITDetails(<any>response_);
                } catch (e) {
                    return <Observable<InvTransferDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<InvTransferDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetITDetails(response: HttpResponseBase): Observable<InvTransferDetails[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(InvTransferDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InvTransferDetails[]>(<any>null);
    }

    /**
     * @param docnum (optional) 
     * @return Success
     */
    getDifference(docnum: number | undefined): Observable<ITRITDifference[]> {
        let url_ = this.baseUrl + "/api/controllers/getDifference?";
        if (docnum === null)
            throw new Error("The parameter 'docnum' cannot be null.");
        else if (docnum !== undefined)
            url_ += "docnum=" + encodeURIComponent("" + docnum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDifference(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDifference(<any>response_);
                } catch (e) {
                    return <Observable<ITRITDifference[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ITRITDifference[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetDifference(response: HttpResponseBase): Observable<ITRITDifference[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ITRITDifference.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ITRITDifference[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    insertITRMRemarks(body: ITRMRemarks | undefined): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/controllers/insertITRMRemarks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertITRMRemarks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertITRMRemarks(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processInsertITRMRemarks(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @param itrNo (optional) 
     * @return Success
     */
    getITRMRemarks(itrNo: number | undefined): Observable<ITRMRemarks[]> {
        let url_ = this.baseUrl + "/api/controllers/getITRMRemarks?";
        if (itrNo === null)
            throw new Error("The parameter 'itrNo' cannot be null.");
        else if (itrNo !== undefined)
            url_ += "itrNo=" + encodeURIComponent("" + itrNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetITRMRemarks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetITRMRemarks(<any>response_);
                } catch (e) {
                    return <Observable<ITRMRemarks[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ITRMRemarks[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetITRMRemarks(response: HttpResponseBase): Observable<ITRMRemarks[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ITRMRemarks.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ITRMRemarks[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateITR(body: number[] | undefined): Observable<ResultReponser> {
        let url_ = this.baseUrl + "/api/controllers/updateITR";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateITR(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateITR(<any>response_);
                } catch (e) {
                    return <Observable<ResultReponser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultReponser>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateITR(response: HttpResponseBase): Observable<ResultReponser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultReponser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultReponser>(<any>null);
    }

    /**
     * @param branch (optional) 
     * @return Success
     */
    getReportCompletion(branch: string | undefined): Observable<ReportCompletion[]> {
        let url_ = this.baseUrl + "/api/controllers/getReportCompletion?";
        if (branch === null)
            throw new Error("The parameter 'branch' cannot be null.");
        else if (branch !== undefined)
            url_ += "branch=" + encodeURIComponent("" + branch) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReportCompletion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReportCompletion(<any>response_);
                } catch (e) {
                    return <Observable<ReportCompletion[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ReportCompletion[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetReportCompletion(response: HttpResponseBase): Observable<ReportCompletion[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ReportCompletion.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReportCompletion[]>(<any>null);
    }

    /**
     * @param docnum (optional) 
     * @return Success
     */
    getRepCompletionDetails(docnum: number | undefined): Observable<RepCompletionDetails[]> {
        let url_ = this.baseUrl + "/api/controllers/getRepCompletionDetails?";
        if (docnum === null)
            throw new Error("The parameter 'docnum' cannot be null.");
        else if (docnum !== undefined)
            url_ += "docnum=" + encodeURIComponent("" + docnum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRepCompletionDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRepCompletionDetails(<any>response_);
                } catch (e) {
                    return <Observable<RepCompletionDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RepCompletionDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRepCompletionDetails(response: HttpResponseBase): Observable<RepCompletionDetails[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(RepCompletionDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RepCompletionDetails[]>(<any>null);
    }
}

export class Account implements IAccount {
    id?: string;
    userName?: string;
    lastName?: string;
    firstName?: string;
    middleName?: string;
    email?: string;
    roleName?: string;

    constructor(data?: IAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userName = data["userName"];
            this.lastName = data["lastName"];
            this.firstName = data["firstName"];
            this.middleName = data["middleName"];
            this.email = data["email"];
            this.roleName = data["roleName"];
        }
    }

    static fromJS(data: any): Account {
        data = typeof data === 'object' ? data : {};
        let result = new Account();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["email"] = this.email;
        data["roleName"] = this.roleName;
        return data; 
    }
}

export interface IAccount {
    id?: string;
    userName?: string;
    lastName?: string;
    firstName?: string;
    middleName?: string;
    email?: string;
    roleName?: string;
}

export class ResultReponser implements IResultReponser {
    result?: string;
    message?: string;
    responseData?: any;

    constructor(data?: IResultReponser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"];
            this.message = data["message"];
            this.responseData = data["responseData"];
        }
    }

    static fromJS(data: any): ResultReponser {
        data = typeof data === 'object' ? data : {};
        let result = new ResultReponser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["message"] = this.message;
        data["responseData"] = this.responseData;
        return data; 
    }
}

export interface IResultReponser {
    result?: string;
    message?: string;
    responseData?: any;
}

export class RegistrationViewModel implements IRegistrationViewModel {
    userName?: string;
    password?: string;
    lastName?: string;
    firstName?: string;
    middleName?: string;
    pm?: boolean;
    pmRemarks?: boolean;
    pmPick?: boolean;
    itrm?: boolean;
    itrmRemarks?: boolean;
    itrmPick?: boolean;
    location?: string[];
    role?: string;

    constructor(data?: IRegistrationViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.password = data["password"];
            this.lastName = data["lastName"];
            this.firstName = data["firstName"];
            this.middleName = data["middleName"];
            this.pm = data["pm"];
            this.pmRemarks = data["pmRemarks"];
            this.pmPick = data["pmPick"];
            this.itrm = data["itrm"];
            this.itrmRemarks = data["itrmRemarks"];
            this.itrmPick = data["itrmPick"];
            if (Array.isArray(data["location"])) {
                this.location = [] as any;
                for (let item of data["location"])
                    this.location.push(item);
            }
            this.role = data["role"];
        }
    }

    static fromJS(data: any): RegistrationViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["pm"] = this.pm;
        data["pmRemarks"] = this.pmRemarks;
        data["pmPick"] = this.pmPick;
        data["itrm"] = this.itrm;
        data["itrmRemarks"] = this.itrmRemarks;
        data["itrmPick"] = this.itrmPick;
        if (Array.isArray(this.location)) {
            data["location"] = [];
            for (let item of this.location)
                data["location"].push(item);
        }
        data["role"] = this.role;
        return data; 
    }
}

export interface IRegistrationViewModel {
    userName?: string;
    password?: string;
    lastName?: string;
    firstName?: string;
    middleName?: string;
    pm?: boolean;
    pmRemarks?: boolean;
    pmPick?: boolean;
    itrm?: boolean;
    itrmRemarks?: boolean;
    itrmPick?: boolean;
    location?: string[];
    role?: string;
}

export class AccountViewModel implements IAccountViewModel {
    userName?: string;
    password?: string;
    lastName?: string;
    firstName?: string;
    middleName?: string;
    pm?: boolean;
    pmRemarks?: boolean;
    pmPick?: boolean;
    itrm?: boolean;
    itrmRemarks?: boolean;
    itrmPick?: boolean;
    role?: string;
    locationAdd?: string[];
    locationDelete?: string[];

    constructor(data?: IAccountViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.password = data["password"];
            this.lastName = data["lastName"];
            this.firstName = data["firstName"];
            this.middleName = data["middleName"];
            this.pm = data["pm"];
            this.pmRemarks = data["pmRemarks"];
            this.pmPick = data["pmPick"];
            this.itrm = data["itrm"];
            this.itrmRemarks = data["itrmRemarks"];
            this.itrmPick = data["itrmPick"];
            this.role = data["role"];
            if (Array.isArray(data["locationAdd"])) {
                this.locationAdd = [] as any;
                for (let item of data["locationAdd"])
                    this.locationAdd.push(item);
            }
            if (Array.isArray(data["locationDelete"])) {
                this.locationDelete = [] as any;
                for (let item of data["locationDelete"])
                    this.locationDelete.push(item);
            }
        }
    }

    static fromJS(data: any): AccountViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AccountViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["pm"] = this.pm;
        data["pmRemarks"] = this.pmRemarks;
        data["pmPick"] = this.pmPick;
        data["itrm"] = this.itrm;
        data["itrmRemarks"] = this.itrmRemarks;
        data["itrmPick"] = this.itrmPick;
        data["role"] = this.role;
        if (Array.isArray(this.locationAdd)) {
            data["locationAdd"] = [];
            for (let item of this.locationAdd)
                data["locationAdd"].push(item);
        }
        if (Array.isArray(this.locationDelete)) {
            data["locationDelete"] = [];
            for (let item of this.locationDelete)
                data["locationDelete"].push(item);
        }
        return data; 
    }
}

export interface IAccountViewModel {
    userName?: string;
    password?: string;
    lastName?: string;
    firstName?: string;
    middleName?: string;
    pm?: boolean;
    pmRemarks?: boolean;
    pmPick?: boolean;
    itrm?: boolean;
    itrmRemarks?: boolean;
    itrmPick?: boolean;
    role?: string;
    locationAdd?: string[];
    locationDelete?: string[];
}

export class ChangePassViewModel implements IChangePassViewModel {
    id?: string;
    oldPassword?: string;
    newPassword?: string;

    constructor(data?: IChangePassViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.oldPassword = data["oldPassword"];
            this.newPassword = data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePassViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePassViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["oldPassword"] = this.oldPassword;
        data["newPassword"] = this.newPassword;
        return data; 
    }
}

export interface IChangePassViewModel {
    id?: string;
    oldPassword?: string;
    newPassword?: string;
}

export class ResetPasswordViewModel implements IResetPasswordViewModel {
    userName?: string;

    constructor(data?: IResetPasswordViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): ResetPasswordViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IResetPasswordViewModel {
    userName?: string;
}

export class ARIPMonitoring implements IARIPMonitoring {
    docDate?: Date;
    arNo?: number;
    daysDue?: number;
    cardName?: string;
    ipNo?: string;
    depositNo?: string;
    status?: string;
    docTotal?: number;
    paidSum?: number;
    totalPayment?: number;
    totalDeposit?: number;
    docEntry?: number;
    remarks?: string;
    groupname?: string;

    constructor(data?: IARIPMonitoring) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.docDate = data["docDate"] ? new Date(data["docDate"].toString()) : <any>undefined;
            this.arNo = data["arNo"];
            this.daysDue = data["daysDue"];
            this.cardName = data["cardName"];
            this.ipNo = data["ipNo"];
            this.depositNo = data["depositNo"];
            this.status = data["status"];
            this.docTotal = data["docTotal"];
            this.paidSum = data["paidSum"];
            this.totalPayment = data["totalPayment"];
            this.totalDeposit = data["totalDeposit"];
            this.docEntry = data["docEntry"];
            this.remarks = data["remarks"];
            this.groupname = data["groupname"];
        }
    }

    static fromJS(data: any): ARIPMonitoring {
        data = typeof data === 'object' ? data : {};
        let result = new ARIPMonitoring();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docDate"] = this.docDate ? this.docDate.toISOString() : <any>undefined;
        data["arNo"] = this.arNo;
        data["daysDue"] = this.daysDue;
        data["cardName"] = this.cardName;
        data["ipNo"] = this.ipNo;
        data["depositNo"] = this.depositNo;
        data["status"] = this.status;
        data["docTotal"] = this.docTotal;
        data["paidSum"] = this.paidSum;
        data["totalPayment"] = this.totalPayment;
        data["totalDeposit"] = this.totalDeposit;
        data["docEntry"] = this.docEntry;
        data["remarks"] = this.remarks;
        data["groupname"] = this.groupname;
        return data; 
    }
}

export interface IARIPMonitoring {
    docDate?: Date;
    arNo?: number;
    daysDue?: number;
    cardName?: string;
    ipNo?: string;
    depositNo?: string;
    status?: string;
    docTotal?: number;
    paidSum?: number;
    totalPayment?: number;
    totalDeposit?: number;
    docEntry?: number;
    remarks?: string;
    groupname?: string;
}

export class ARIPDetails implements IARIPDetails {
    itemCode?: string;
    dscription?: string;
    quantity?: number;
    price?: number;
    lineTotal?: number;

    constructor(data?: IARIPDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.dscription = data["dscription"];
            this.quantity = data["quantity"];
            this.price = data["price"];
            this.lineTotal = data["lineTotal"];
        }
    }

    static fromJS(data: any): ARIPDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ARIPDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["dscription"] = this.dscription;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["lineTotal"] = this.lineTotal;
        return data; 
    }
}

export interface IARIPDetails {
    itemCode?: string;
    dscription?: string;
    quantity?: number;
    price?: number;
    lineTotal?: number;
}

export class IPDetails implements IIPDetails {
    cashAcct?: string;
    cashSum?: number;
    checkAcct?: string;
    checkSum?: number;
    trsfrAcct?: string;
    trsfrSum?: number;

    constructor(data?: IIPDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cashAcct = data["cashAcct"];
            this.cashSum = data["cashSum"];
            this.checkAcct = data["checkAcct"];
            this.checkSum = data["checkSum"];
            this.trsfrAcct = data["trsfrAcct"];
            this.trsfrSum = data["trsfrSum"];
        }
    }

    static fromJS(data: any): IPDetails {
        data = typeof data === 'object' ? data : {};
        let result = new IPDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cashAcct"] = this.cashAcct;
        data["cashSum"] = this.cashSum;
        data["checkAcct"] = this.checkAcct;
        data["checkSum"] = this.checkSum;
        data["trsfrAcct"] = this.trsfrAcct;
        data["trsfrSum"] = this.trsfrSum;
        return data; 
    }
}

export interface IIPDetails {
    cashAcct?: string;
    cashSum?: number;
    checkAcct?: string;
    checkSum?: number;
    trsfrAcct?: string;
    trsfrSum?: number;
}

export class DepositDetails implements IDepositDetails {
    deposNum?: number;
    deposDate?: Date;
    banckAcct?: string;
    checkDate?: Date;
    checkSum?: number;
    locTotal?: number;

    constructor(data?: IDepositDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.deposNum = data["deposNum"];
            this.deposDate = data["deposDate"] ? new Date(data["deposDate"].toString()) : <any>undefined;
            this.banckAcct = data["banckAcct"];
            this.checkDate = data["checkDate"] ? new Date(data["checkDate"].toString()) : <any>undefined;
            this.checkSum = data["checkSum"];
            this.locTotal = data["locTotal"];
        }
    }

    static fromJS(data: any): DepositDetails {
        data = typeof data === 'object' ? data : {};
        let result = new DepositDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deposNum"] = this.deposNum;
        data["deposDate"] = this.deposDate ? this.deposDate.toISOString() : <any>undefined;
        data["banckAcct"] = this.banckAcct;
        data["checkDate"] = this.checkDate ? this.checkDate.toISOString() : <any>undefined;
        data["checkSum"] = this.checkSum;
        data["locTotal"] = this.locTotal;
        return data; 
    }
}

export interface IDepositDetails {
    deposNum?: number;
    deposDate?: Date;
    banckAcct?: string;
    checkDate?: Date;
    checkSum?: number;
    locTotal?: number;
}

export class ARIPDepDifference implements IARIPDepDifference {
    docDate?: Date;
    docNum?: number;
    docTotal?: number;
    paidSum?: number;
    totalPayment?: number;
    totalDeposit?: number;

    constructor(data?: IARIPDepDifference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.docDate = data["docDate"] ? new Date(data["docDate"].toString()) : <any>undefined;
            this.docNum = data["docNum"];
            this.docTotal = data["docTotal"];
            this.paidSum = data["paidSum"];
            this.totalPayment = data["totalPayment"];
            this.totalDeposit = data["totalDeposit"];
        }
    }

    static fromJS(data: any): ARIPDepDifference {
        data = typeof data === 'object' ? data : {};
        let result = new ARIPDepDifference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docDate"] = this.docDate ? this.docDate.toISOString() : <any>undefined;
        data["docNum"] = this.docNum;
        data["docTotal"] = this.docTotal;
        data["paidSum"] = this.paidSum;
        data["totalPayment"] = this.totalPayment;
        data["totalDeposit"] = this.totalDeposit;
        return data; 
    }
}

export interface IARIPDepDifference {
    docDate?: Date;
    docNum?: number;
    docTotal?: number;
    paidSum?: number;
    totalPayment?: number;
    totalDeposit?: number;
}

export class ARMRemarks implements IARMRemarks {
    id?: number;
    logDate?: Date;
    logName?: string;
    remarks?: string;
    arNo?: number;

    constructor(data?: IARMRemarks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.logDate = data["logDate"] ? new Date(data["logDate"].toString()) : <any>undefined;
            this.logName = data["logName"];
            this.remarks = data["remarks"];
            this.arNo = data["arNo"];
        }
    }

    static fromJS(data: any): ARMRemarks {
        data = typeof data === 'object' ? data : {};
        let result = new ARMRemarks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["logDate"] = this.logDate ? this.logDate.toISOString() : <any>undefined;
        data["logName"] = this.logName;
        data["remarks"] = this.remarks;
        data["arNo"] = this.arNo;
        return data; 
    }
}

export interface IARMRemarks {
    id?: number;
    logDate?: Date;
    logName?: string;
    remarks?: string;
    arNo?: number;
}

export class CredentialsViewModel implements ICredentialsViewModel {
    userName?: string;
    password?: string;

    constructor(data?: ICredentialsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): CredentialsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CredentialsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }
}

export interface ICredentialsViewModel {
    userName?: string;
    password?: string;
}

export class Branches implements IBranches {
    code?: string;
    name?: string;

    constructor(data?: IBranches) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Branches {
        data = typeof data === 'object' ? data : {};
        let result = new Branches();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface IBranches {
    code?: string;
    name?: string;
}

export class Locations implements ILocations {
    location?: string;

    constructor(data?: ILocations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.location = data["location"];
        }
    }

    static fromJS(data: any): Locations {
        data = typeof data === 'object' ? data : {};
        let result = new Locations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["location"] = this.location;
        return data; 
    }
}

export interface ILocations {
    location?: string;
}

export class CustomerGroup implements ICustomerGroup {
    groupname?: string;

    constructor(data?: ICustomerGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupname = data["groupname"];
        }
    }

    static fromJS(data: any): CustomerGroup {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupname"] = this.groupname;
        return data; 
    }
}

export interface ICustomerGroup {
    groupname?: string;
}

export class IssueForProduction implements IIssueForProduction {
    docStatus?: string;
    docNum?: number;
    itrNo?: string;
    branchName?: string;
    docDate?: Date;
    status?: string;
    daysDue?: number;
    reportCompletionNo?: string;
    docRemarks?: string;

    constructor(data?: IIssueForProduction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.docStatus = data["docStatus"];
            this.docNum = data["docNum"];
            this.itrNo = data["itrNo"];
            this.branchName = data["branchName"];
            this.docDate = data["docDate"] ? new Date(data["docDate"].toString()) : <any>undefined;
            this.status = data["status"];
            this.daysDue = data["daysDue"];
            this.reportCompletionNo = data["reportCompletionNo"];
            this.docRemarks = data["docRemarks"];
        }
    }

    static fromJS(data: any): IssueForProduction {
        data = typeof data === 'object' ? data : {};
        let result = new IssueForProduction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docStatus"] = this.docStatus;
        data["docNum"] = this.docNum;
        data["itrNo"] = this.itrNo;
        data["branchName"] = this.branchName;
        data["docDate"] = this.docDate ? this.docDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["daysDue"] = this.daysDue;
        data["reportCompletionNo"] = this.reportCompletionNo;
        data["docRemarks"] = this.docRemarks;
        return data; 
    }
}

export interface IIssueForProduction {
    docStatus?: string;
    docNum?: number;
    itrNo?: string;
    branchName?: string;
    docDate?: Date;
    status?: string;
    daysDue?: number;
    reportCompletionNo?: string;
    docRemarks?: string;
}

export class IssueForProdDetails implements IIssueForProdDetails {
    itemCode?: string;
    description?: string;
    quantity?: number;

    constructor(data?: IIssueForProdDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.description = data["description"];
            this.quantity = data["quantity"];
        }
    }

    static fromJS(data: any): IssueForProdDetails {
        data = typeof data === 'object' ? data : {};
        let result = new IssueForProdDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["description"] = this.description;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IIssueForProdDetails {
    itemCode?: string;
    description?: string;
    quantity?: number;
}

export class JobOrder implements IJobOrder {
    docStatus?: string;
    docNum?: number;
    itrNo?: string;
    cardName?: string;
    docDate?: Date;
    status?: string;
    daysDue?: number;
    prodForecastNo?: string;
    docRemarks?: string;

    constructor(data?: IJobOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.docStatus = data["docStatus"];
            this.docNum = data["docNum"];
            this.itrNo = data["itrNo"];
            this.cardName = data["cardName"];
            this.docDate = data["docDate"] ? new Date(data["docDate"].toString()) : <any>undefined;
            this.status = data["status"];
            this.daysDue = data["daysDue"];
            this.prodForecastNo = data["prodForecastNo"];
            this.docRemarks = data["docRemarks"];
        }
    }

    static fromJS(data: any): JobOrder {
        data = typeof data === 'object' ? data : {};
        let result = new JobOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docStatus"] = this.docStatus;
        data["docNum"] = this.docNum;
        data["itrNo"] = this.itrNo;
        data["cardName"] = this.cardName;
        data["docDate"] = this.docDate ? this.docDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["daysDue"] = this.daysDue;
        data["prodForecastNo"] = this.prodForecastNo;
        data["docRemarks"] = this.docRemarks;
        return data; 
    }
}

export interface IJobOrder {
    docStatus?: string;
    docNum?: number;
    itrNo?: string;
    cardName?: string;
    docDate?: Date;
    status?: string;
    daysDue?: number;
    prodForecastNo?: string;
    docRemarks?: string;
}

export class JobOrderDetails implements IJobOrderDetails {
    itemCode?: string;
    description?: string;
    quantity?: number;
    priceAfVAT?: number;
    lineTotal?: number;

    constructor(data?: IJobOrderDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.description = data["description"];
            this.quantity = data["quantity"];
            this.priceAfVAT = data["priceAfVAT"];
            this.lineTotal = data["lineTotal"];
        }
    }

    static fromJS(data: any): JobOrderDetails {
        data = typeof data === 'object' ? data : {};
        let result = new JobOrderDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["description"] = this.description;
        data["quantity"] = this.quantity;
        data["priceAfVAT"] = this.priceAfVAT;
        data["lineTotal"] = this.lineTotal;
        return data; 
    }
}

export interface IJobOrderDetails {
    itemCode?: string;
    description?: string;
    quantity?: number;
    priceAfVAT?: number;
    lineTotal?: number;
}

export class ProductionForecast implements IProductionForecast {
    itrNo?: string;
    docDate?: Date;
    docNum?: number;
    daysDue?: number;
    goodsIssueNo?: string;
    grDocNum?: string;
    status?: string;
    docRemarks?: string;
    docEntry?: number;

    constructor(data?: IProductionForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itrNo = data["itrNo"];
            this.docDate = data["docDate"] ? new Date(data["docDate"].toString()) : <any>undefined;
            this.docNum = data["docNum"];
            this.daysDue = data["daysDue"];
            this.goodsIssueNo = data["goodsIssueNo"];
            this.grDocNum = data["grDocNum"];
            this.status = data["status"];
            this.docRemarks = data["docRemarks"];
            this.docEntry = data["docEntry"];
        }
    }

    static fromJS(data: any): ProductionForecast {
        data = typeof data === 'object' ? data : {};
        let result = new ProductionForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itrNo"] = this.itrNo;
        data["docDate"] = this.docDate ? this.docDate.toISOString() : <any>undefined;
        data["docNum"] = this.docNum;
        data["daysDue"] = this.daysDue;
        data["goodsIssueNo"] = this.goodsIssueNo;
        data["grDocNum"] = this.grDocNum;
        data["status"] = this.status;
        data["docRemarks"] = this.docRemarks;
        data["docEntry"] = this.docEntry;
        return data; 
    }
}

export interface IProductionForecast {
    itrNo?: string;
    docDate?: Date;
    docNum?: number;
    daysDue?: number;
    goodsIssueNo?: string;
    grDocNum?: string;
    status?: string;
    docRemarks?: string;
    docEntry?: number;
}

export class ProductionForecastDetails implements IProductionForecastDetails {
    itemCode?: string;
    description?: string;
    quantity?: number;

    constructor(data?: IProductionForecastDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.description = data["description"];
            this.quantity = data["quantity"];
        }
    }

    static fromJS(data: any): ProductionForecastDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProductionForecastDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["description"] = this.description;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IProductionForecastDetails {
    itemCode?: string;
    description?: string;
    quantity?: number;
}

export class SQGRDifference implements ISQGRDifference {
    itemCode?: string;
    dscription?: string;
    sqQuantity?: number;
    grQuantity?: number;

    constructor(data?: ISQGRDifference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.dscription = data["dscription"];
            this.sqQuantity = data["sqQuantity"];
            this.grQuantity = data["grQuantity"];
        }
    }

    static fromJS(data: any): SQGRDifference {
        data = typeof data === 'object' ? data : {};
        let result = new SQGRDifference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["dscription"] = this.dscription;
        data["sqQuantity"] = this.sqQuantity;
        data["grQuantity"] = this.grQuantity;
        return data; 
    }
}

export interface ISQGRDifference {
    itemCode?: string;
    dscription?: string;
    sqQuantity?: number;
    grQuantity?: number;
}

export class ITRNos implements IITRNos {
    itrNo?: string;

    constructor(data?: IITRNos) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itrNo = data["itrNo"];
        }
    }

    static fromJS(data: any): ITRNos {
        data = typeof data === 'object' ? data : {};
        let result = new ITRNos();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itrNo"] = this.itrNo;
        return data; 
    }
}

export interface IITRNos {
    itrNo?: string;
}

export class PMRemarks implements IPMRemarks {
    id?: number;
    logDate?: Date;
    logName?: string;
    remarks?: string;
    sqNo?: number;

    constructor(data?: IPMRemarks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.logDate = data["logDate"] ? new Date(data["logDate"].toString()) : <any>undefined;
            this.logName = data["logName"];
            this.remarks = data["remarks"];
            this.sqNo = data["sqNo"];
        }
    }

    static fromJS(data: any): PMRemarks {
        data = typeof data === 'object' ? data : {};
        let result = new PMRemarks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["logDate"] = this.logDate ? this.logDate.toISOString() : <any>undefined;
        data["logName"] = this.logName;
        data["remarks"] = this.remarks;
        data["sqNo"] = this.sqNo;
        return data; 
    }
}

export interface IPMRemarks {
    id?: number;
    logDate?: Date;
    logName?: string;
    remarks?: string;
    sqNo?: number;
}

export class ProductionOrder implements IProductionOrder {
    docDate?: Date;
    from?: string;
    to?: string;
    itrNo?: number;
    daysDue?: number;
    itNo?: string;
    status?: string;
    docRemarks?: string;
    group?: string;

    constructor(data?: IProductionOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.docDate = data["docDate"] ? new Date(data["docDate"].toString()) : <any>undefined;
            this.from = data["from"];
            this.to = data["to"];
            this.itrNo = data["itrNo"];
            this.daysDue = data["daysDue"];
            this.itNo = data["itNo"];
            this.status = data["status"];
            this.docRemarks = data["docRemarks"];
            this.group = data["group"];
        }
    }

    static fromJS(data: any): ProductionOrder {
        data = typeof data === 'object' ? data : {};
        let result = new ProductionOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docDate"] = this.docDate ? this.docDate.toISOString() : <any>undefined;
        data["from"] = this.from;
        data["to"] = this.to;
        data["itrNo"] = this.itrNo;
        data["daysDue"] = this.daysDue;
        data["itNo"] = this.itNo;
        data["status"] = this.status;
        data["docRemarks"] = this.docRemarks;
        data["group"] = this.group;
        return data; 
    }
}

export interface IProductionOrder {
    docDate?: Date;
    from?: string;
    to?: string;
    itrNo?: number;
    daysDue?: number;
    itNo?: string;
    status?: string;
    docRemarks?: string;
    group?: string;
}

export class FilterITR implements IFilterITR {
    docDate?: Date;
    from?: string;
    to?: string;
    itrNo?: number;
    daysDue?: number;
    itNo?: string;
    status?: string;
    docRemarks?: string;
    group?: string;

    constructor(data?: IFilterITR) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.docDate = data["docDate"] ? new Date(data["docDate"].toString()) : <any>undefined;
            this.from = data["from"];
            this.to = data["to"];
            this.itrNo = data["itrNo"];
            this.daysDue = data["daysDue"];
            this.itNo = data["itNo"];
            this.status = data["status"];
            this.docRemarks = data["docRemarks"];
            this.group = data["group"];
        }
    }

    static fromJS(data: any): FilterITR {
        data = typeof data === 'object' ? data : {};
        let result = new FilterITR();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docDate"] = this.docDate ? this.docDate.toISOString() : <any>undefined;
        data["from"] = this.from;
        data["to"] = this.to;
        data["itrNo"] = this.itrNo;
        data["daysDue"] = this.daysDue;
        data["itNo"] = this.itNo;
        data["status"] = this.status;
        data["docRemarks"] = this.docRemarks;
        data["group"] = this.group;
        return data; 
    }
}

export interface IFilterITR {
    docDate?: Date;
    from?: string;
    to?: string;
    itrNo?: number;
    daysDue?: number;
    itNo?: string;
    status?: string;
    docRemarks?: string;
    group?: string;
}

export class ProdOrderDetails implements IProdOrderDetails {
    itemCode?: string;
    description?: string;
    quantity?: number;
    itQuantity?: number;

    constructor(data?: IProdOrderDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.description = data["description"];
            this.quantity = data["quantity"];
            this.itQuantity = data["itQuantity"];
        }
    }

    static fromJS(data: any): ProdOrderDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProdOrderDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["description"] = this.description;
        data["quantity"] = this.quantity;
        data["itQuantity"] = this.itQuantity;
        return data; 
    }
}

export interface IProdOrderDetails {
    itemCode?: string;
    description?: string;
    quantity?: number;
    itQuantity?: number;
}

export class InvTransferDetails implements IInvTransferDetails {
    itemCode?: string;
    dscription?: string;
    quantity?: number;

    constructor(data?: IInvTransferDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.dscription = data["dscription"];
            this.quantity = data["quantity"];
        }
    }

    static fromJS(data: any): InvTransferDetails {
        data = typeof data === 'object' ? data : {};
        let result = new InvTransferDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["dscription"] = this.dscription;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IInvTransferDetails {
    itemCode?: string;
    dscription?: string;
    quantity?: number;
}

export class ITRITDifference implements IITRITDifference {
    itemCode?: string;
    dscription?: string;
    itrQuantity?: number;
    itQuantity?: number;

    constructor(data?: IITRITDifference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.dscription = data["dscription"];
            this.itrQuantity = data["itrQuantity"];
            this.itQuantity = data["itQuantity"];
        }
    }

    static fromJS(data: any): ITRITDifference {
        data = typeof data === 'object' ? data : {};
        let result = new ITRITDifference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["dscription"] = this.dscription;
        data["itrQuantity"] = this.itrQuantity;
        data["itQuantity"] = this.itQuantity;
        return data; 
    }
}

export interface IITRITDifference {
    itemCode?: string;
    dscription?: string;
    itrQuantity?: number;
    itQuantity?: number;
}

export class ITRMRemarks implements IITRMRemarks {
    id?: number;
    logDate?: Date;
    logName?: string;
    remarks?: string;
    itrNo?: number;

    constructor(data?: IITRMRemarks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.logDate = data["logDate"] ? new Date(data["logDate"].toString()) : <any>undefined;
            this.logName = data["logName"];
            this.remarks = data["remarks"];
            this.itrNo = data["itrNo"];
        }
    }

    static fromJS(data: any): ITRMRemarks {
        data = typeof data === 'object' ? data : {};
        let result = new ITRMRemarks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["logDate"] = this.logDate ? this.logDate.toISOString() : <any>undefined;
        data["logName"] = this.logName;
        data["remarks"] = this.remarks;
        data["itrNo"] = this.itrNo;
        return data; 
    }
}

export interface IITRMRemarks {
    id?: number;
    logDate?: Date;
    logName?: string;
    remarks?: string;
    itrNo?: number;
}

export class ReportCompletion implements IReportCompletion {
    docStatus?: string;
    docNum?: number;
    itrNo?: string;
    branchName?: string;
    docDate?: Date;
    status?: string;
    daysDue?: number;
    invTransferNo?: string;
    docRemarks?: string;

    constructor(data?: IReportCompletion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.docStatus = data["docStatus"];
            this.docNum = data["docNum"];
            this.itrNo = data["itrNo"];
            this.branchName = data["branchName"];
            this.docDate = data["docDate"] ? new Date(data["docDate"].toString()) : <any>undefined;
            this.status = data["status"];
            this.daysDue = data["daysDue"];
            this.invTransferNo = data["invTransferNo"];
            this.docRemarks = data["docRemarks"];
        }
    }

    static fromJS(data: any): ReportCompletion {
        data = typeof data === 'object' ? data : {};
        let result = new ReportCompletion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docStatus"] = this.docStatus;
        data["docNum"] = this.docNum;
        data["itrNo"] = this.itrNo;
        data["branchName"] = this.branchName;
        data["docDate"] = this.docDate ? this.docDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["daysDue"] = this.daysDue;
        data["invTransferNo"] = this.invTransferNo;
        data["docRemarks"] = this.docRemarks;
        return data; 
    }
}

export interface IReportCompletion {
    docStatus?: string;
    docNum?: number;
    itrNo?: string;
    branchName?: string;
    docDate?: Date;
    status?: string;
    daysDue?: number;
    invTransferNo?: string;
    docRemarks?: string;
}

export class RepCompletionDetails implements IRepCompletionDetails {
    itemCode?: string;
    description?: string;
    quantity?: number;

    constructor(data?: IRepCompletionDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.description = data["description"];
            this.quantity = data["quantity"];
        }
    }

    static fromJS(data: any): RepCompletionDetails {
        data = typeof data === 'object' ? data : {};
        let result = new RepCompletionDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["description"] = this.description;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IRepCompletionDetails {
    itemCode?: string;
    description?: string;
    quantity?: number;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}